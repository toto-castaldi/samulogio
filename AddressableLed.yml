esphome:
  name: esphome-led
  includes:
    - samulogio.hpp
  on_boot:
    priority: -100
    # ...
    then:
      - light.turn_on: light_switch
      - ds1307.read_time:
# esp8266:
  # board: esp01
esp8266:
  board: nodemcuv2

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret encr_Key
ota:

wifi:
  ssid: !secret WiFi_SSID
  password: !secret WiFi_PWD

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Esphome-display-test"

i2c:
  sda: 4
  scl: 5
  scan: true
  
#  id: bus_a
#captive_portal:
time:
  - platform: sntp
    id: sntp_time
    on_time_sync:
      then:
        # ... and update the RTC when the synchronization was successful
        ds1307.write_time:
  - platform: ds1307
    id: rtc_time
    address: 0x50
    update_interval: never

number:
  - platform: template
    id: hhh
    name: "Test hour"
    step: 1
    min_value: 0
    max_value: 23
    optimistic: true
  - platform: template
    id: mmm
    name: "Test minutes"
    step: 1
    min_value: 0
    max_value: 59
    optimistic: true
  - platform: template
    id: sss
    name: "Test seconds"
    step: 1
    min_value: 0
    max_value: 59
    optimistic: true


light:
  - platform: neopixelbus
    type: GRB
    variant: WS2811
    pin: GPIO14
    num_leds: 96
    name: "NeoPixel Light"
    id: light_switch
    on_turn_on:
      then:
        - light.control:
            id: light_switch
            effect: 5 - 3 - 1
    effects:
      - addressable_rainbow:
      - addressable_color_wipe:
      - addressable_scan:
          scan_width: 5


      - addressable_lambda:
          update_interval: 200ms
          name: "Bullet 3 Rings"
          lambda: |-
            auto time = id(rtc_time).now();
            Color r = Color(128,0,0), g = Color(0,128,0), b = Color(0,0,128);    //should be moved to HPP
            int myH, myM, myS;
            
            it.range(0, it.size()) = Color::BLACK;
            
            myH = Get_Centerpoint(time.hour, 12, samulogio::R1, samulogio::OFFSET_R1, samulogio::START_SMALL);
            myM = Get_Centerpoint(time.minute, 60, samulogio::R2, samulogio::OFFSET_R2, samulogio::START_MID);
            myS = Get_Centerpoint(time.second, 60, samulogio::R3, samulogio::OFFSET_R3, samulogio::START_LARGE);
            
            it[myH] = b;
            it[myM] = r;
            it[myS] = g;
            
      - addressable_lambda:
          update_interval: 50ms
          name: "Bullet 1 Ring"
          lambda: |-
            auto time = id(rtc_time).now();
            Color r = Color(128,0,0), g = Color(0,128,0), b = Color(0,0,128);    //should be moved to HPP
            int myH, myM, myS;
            
            it.range(0, it.size()) = Color::BLACK;
            
            myH = Get_Centerpoint(time.hour, 12, samulogio::R3, samulogio::OFFSET_R3, samulogio::START_LARGE);
            myM = Get_Centerpoint(time.minute, 60, samulogio::R3, samulogio::OFFSET_R3, samulogio::START_LARGE);
            myS = Get_Centerpoint(time.second, 60, samulogio::R3, samulogio::OFFSET_R3, samulogio::START_LARGE);
            
            it[myH] = b;
            it[myM] = it[myM].get() + r;
            it[myS] = it[myS].get() + g;
      - addressable_lambda:
          update_interval: 50ms
          name: "Stripes 3 Rings"
          
          # L'idea è la seguente:
          # si definiscono un po' di const per inizio/fine dei tre display
          # myH,myM e myS rappresentano ore, minuti e secondi
          # E' sempre presente un operatore  "(x + numero - 1) % numero + 1" per far si che resto zero sia in realtà "tutto pieno"
          # Per ore e secondi è "facile"
          # Per minuti si deve prendere il resto a 5 minuti
          # Ogni 5 minuti sono 2 led (da cui il *2/5)
          # I minuti rimanenti si trasformano in secondi e gli si aggiungono i secondi 
          # Se il risultato è > 150 (= 2 min e 30 s) si aggiunge un altro led ai minuti, e si toglie 150 a questo numero
          # A questo punto questo numero (tra 0 e 150) viene usato per la luminosità
          
          
          lambda: |-
            auto time = id(rtc_time).now();
            Color r = Color(128,0,0), g = Color(0,128,0), b = Color(0,0,128);    //should be moved to HPP
            const int myR[4] = {samulogio::START_SMALL, samulogio::START_MID, samulogio::START_LARGE, samulogio::START_LARGE + samulogio::R3};
            int j;
            std::pair<int, int> myS1, myM1, myH1, myS2, myM2, myH2;
            std::pair<int, int> *t1, *t2;
            
            myH2 = GetFirstAndLastTime(time.hour, 12, samulogio::R1,  samulogio::OFFSET_R1, samulogio::START_SMALL, time.hour, 0);
            myM2 = GetFirstAndLastTime(time.minute, 60, samulogio::R2, samulogio::OFFSET_R2, samulogio::START_MID, time.minute, 0);
            myS2 = GetFirstAndLastTime(time.second, 60, samulogio::R3, samulogio::OFFSET_R3, samulogio::START_LARGE, time.second, 0);
            
            for (j=0; j < 3; j++)
            {
                switch (j)
                {
                    case 0:
                        t1 = &myH1, t2 = &myH2;
                        break;
                    case 1:
                        t1 = &myM1, t2 = &myM2;
                        break;
                    case 2:
                        t1 = &myS1, t2 = &myS2;
                        break;
                }
                if ((t2->first) > (t2->second))
                {
                    t1->first = t2->first;
                    t1->second = myR[j+1];
                    t2->first = myR[j];
                }
                else    //make a useless pair
                {
                    t1->first = 1;
                    t1->second = 0;
                }
            }
            
            
            it.range(0, it.size()) = Color::BLACK;            
            for (j = myH1.first; j < myH1.second; j++)
                it[j] = b;
            for (j = myH2.first; j < myH2.second; j++)
                it[j] = b;
                
            for (j = myM1.first; j < myM1.second; j++)
                it[j] = r;
            for (j = myM2.first; j < myM2.second; j++)
                it[j] = r;    
                
            for (j = myS1.first; j < myS1.second; j++)
                it[j] = g;
            for (j = myS2.first; j < myS2.second; j++)
                it[j] = g;        
                
            
      - addressable_lambda:
          update_interval: 50ms
          name: "Stripes 1 Ring"
          
          # L'idea è la seguente:
          # si definiscono un po' di const per inizio/fine dei tre display
          # myH,myM e myS rappresentano ore, minuti e secondi
          # E' sempre presente un operatore  "(x + numero - 1) % numero + 1" per far si che resto zero sia in realtà "tutto pieno"
          # Per ore e secondi è "facile"
          # Per minuti si deve prendere il resto a 5 minuti
          # Ogni 5 minuti sono 2 led (da cui il *2/5)
          # I minuti rimanenti si trasformano in secondi e gli si aggiungono i secondi 
          # Se il risultato è > 150 (= 2 min e 30 s) si aggiunge un altro led ai minuti, e si toglie 150 a questo numero
          # A questo punto questo numero (tra 0 e 150) viene usato per la luminosità
          
          
          lambda: |-
            auto time = id(rtc_time).now();
            Color r = Color(128,0,0), g = Color(0,128,0), b = Color(0,0,128);    //should be moved to HPP
            const int myR[2] = {samulogio::START_LARGE, samulogio::START_LARGE + samulogio::R3};
            int j;
            std::pair<int, int> myS1, myM1, myH1, myS2, myM2, myH2;
            std::pair<int, int> *t1, *t2;
            
            myH2 = GetFirstAndLastTime(time.hour, 12, samulogio::R3,  samulogio::OFFSET_R3, samulogio::START_LARGE, time.hour, 0);
            myM2 = GetFirstAndLastTime(time.minute, 60, samulogio::R3, samulogio::OFFSET_R3, samulogio::START_LARGE, time.minute, 0);
            myS2 = GetFirstAndLastTime(time.second, 60, samulogio::R3, samulogio::OFFSET_R3, samulogio::START_LARGE, time.second, 0);
            
            for (j=0; j < 3; j++)
            {
                switch (j)
                {
                    case 0:
                        t1 = &myH1, t2 = &myH2;
                        break;
                    case 1:
                        t1 = &myM1, t2 = &myM2;
                        break;
                    case 2:
                        t1 = &myS1, t2 = &myS2;
                        break;
                }
                if ((t2->first) > (t2->second))
                {
                    t1->first = t2->first;
                    t1->second = myR[1];
                    t2->first = myR[0];
                }
                else    //make a useless pair
                {
                    t1->first = 1;
                    t1->second = 0;
                }
            }
            
            
            it.range(0, it.size()) = Color::BLACK;            
            for (j = myH1.first; j < myH1.second; j++)
                it[j] = b;
            for (j = myH2.first; j < myH2.second; j++)
                it[j] = b;
                
            for (j = myM1.first; j < myM1.second; j++)
                it[j] = it[j].get() + r;
            for (j = myM2.first; j < myM2.second; j++)
                it[j] = it[j].get() + r;    
                
            for (j = myS1.first; j < myS1.second; j++)
                it[j] = it[j].get() + g;
            for (j = myS2.first; j < myS2.second; j++)
                it[j] = it[j].get() + g;        
                
            
            
            
      - addressable_lambda:
          update_interval: 50ms
          name: "5 - 3 - 1"
          
          # L'idea è la seguente:
          # si definiscono un po' di const per inizio/fine dei tre display
          # myH,myM e myS rappresentano ore, minuti e secondi
          # E' sempre presente un operatore  "(x + numero - 1) % numero + 1" per far si che resto zero sia in realtà "tutto pieno"
          # Per ore e secondi è "facile"
          # Per minuti si deve prendere il resto a 5 minuti
          # Ogni 5 minuti sono 2 led (da cui il *2/5)
          # I minuti rimanenti si trasformano in secondi e gli si aggiungono i secondi 
          # Se il risultato è > 150 (= 2 min e 30 s) si aggiunge un altro led ai minuti, e si toglie 150 a questo numero
          # A questo punto questo numero (tra 0 e 150) viene usato per la luminosità
          
          
          lambda: |-
            auto time = id(rtc_time).now();
            const Color r = Color(192,0,0), g = Color(0,192,0), b = Color(0,0,192);    //should be moved to HPP
            const Color dr = Color (96,0,0), db = Color (0,0,48);
            const Color bs[5]  = {b - db - db, b - db, b, b-db, b- db - db},
                        rs[3]  =              {r - dr, r, r- dr};
            const int myR[2] = {samulogio::START_LARGE, samulogio::START_LARGE + samulogio::R3};
            const int N_HOUR = 5, N_MIN = 3;
            int redLeds[N_MIN], blueLeds[N_HOUR];
            int j, c_i;
            std::pair<int, int> myS, myM, myH;
            
            myH = GetFirstAndLastIndex(time.hour, 12, samulogio::R3,  samulogio::OFFSET_R3, samulogio::START_LARGE, 2, 2);
            myM = GetFirstAndLastIndex(time.minute, 60, samulogio::R3, samulogio::OFFSET_R3, samulogio::START_LARGE, 1, 1);
            myS = GetFirstAndLastIndex(time.second, 60, samulogio::R3, samulogio::OFFSET_R3, samulogio::START_LARGE, 0, 0);
            
            for(j = 0; j < N_HOUR; j++)
               blueLeds[j] = myH.first + j;
               
            for(j = 0; j < N_MIN; j++)
               redLeds[j] = myM.first + j;
               
            if ((myH.first) > (myH.second))   //then need a zero
                    for(j = myH.second; j > 0; j--)
                        blueLeds[N_HOUR - j] -= samulogio::R3;
            if ((myM.first) > (myM.second))   //then need a zero
                    for(j = myM.second; j > 0; j--)
                        redLeds[N_HOUR - j] -= samulogio::R3;
            
            it.range(0, it.size()) = Color::BLACK;
            for (j = 0; j < N_HOUR; j++)
                it[blueLeds[j]] = bs[j];
            for (j = 0; j < N_MIN; j++)
                it[redLeds[j]] = it[redLeds[j]].get() + rs[j];
            
              it[myS.first] = it[myS.first].get() + g;        
            
            
            
      - addressable_lambda:
          update_interval: 1000ms
          name: "test"
          
          lambda: |-
            Color r = Color(128,0,0), g = Color(0,128,0), b = Color(0,0,128);    //should be moved to HPP
            int myH, myM, myS;
            
            it.range(0, it.size()) = Color::BLACK;
            
            myH = Get_Centerpoint(id(hhh).state, 12, samulogio::R1, samulogio::OFFSET_R1, samulogio::START_SMALL);
            myM = Get_Centerpoint(id(mmm).state, 60, samulogio::R2, samulogio::OFFSET_R2, samulogio::START_MID);
            myS = Get_Centerpoint(id(sss).state, 60, samulogio::R3, samulogio::OFFSET_R3, samulogio::START_LARGE);
            
            
            it[myH] = b;
            it[myM] = r;
            it[myS] = g;
            
            
web_server:
  port: 80